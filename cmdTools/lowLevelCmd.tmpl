

var (
    {{ $operationId := .operationId }}
    {{if not .requiredFlags}}
    {{else}}
        {{- range .requiredFlags}}
            {{ $operationId }}{{ . }} string
        {{ end }}
    {{end}}
    {{ $operationId }}Backup bool
)

func New{{ .operationId }}Cmd() *cobra.Command {
    cmd := &cobra.Command{
	    Use:   "{{ .subCommand }}",
        Long: "{{ .summary }}",
        RunE: func(cmd *cobra.Command, args []string) error {
            {{ $operationId := .operationId }}
            {{ $newParam := "" }}
            {{if not .pathParams}}
            req := apiClient.{{ .name }}API.{{ .operationId }}(apiClient.GetConfig().Context)
            {{else}}
            req := apiClient.{{ .name }}API.{{ .operationId }}(apiClient.GetConfig().Context, {{join .pathParams ", "}})
            {{end}}
            {{if .data}}
            if {{ .operationId }}data != "" {
                req = req.Data({{ .operationId }}data)
            }
            {{else}}
            {{end}}
            resp, err := req.Execute()
            if err != nil {
                if resp != nil && resp.Body != nil {
                    d, err := io.ReadAll(resp.Body)
                    if err == nil {
                        utils.PrettyPrintByte(d)
                    }
                }
                return err
            }
		    d, err := io.ReadAll(resp.Body)
		    if err != nil {
			    return err
		    }
            if {{ .operationId }}Backup {
                {{if .pathParams}}
                idParam := {{index .pathParams 0}}
                err := utils.BackupObject(d, "{{ .name }}", idParam)
                {{else}}

                err := utils.BackupObject(d, "{{ .name }}", "hasNoIdParam")
                {{end}}
                if err != nil {
                    return err
                }
            }
            utils.PrettyPrintByte(d)
            return nil
        },
    }

    {{ $operationId := .operationId }}
    {{if not .requiredFlags}}
    {{else}}
        {{- range .requiredFlags}}
        cmd.Flags().StringVarP(&{{ $operationId }}{{ . }}, "{{ . }}", "", "", "")
        cmd.MarkFlagRequired("{{ . }}")
        {{ end }}
    {{end}}
    cmd.Flags().BoolVarP(&{{ $operationId }}Backup, "backup", "b", false, "Backup the object to a file")

	return cmd
}

func init() {
	{{ .operationId }}Cmd := New{{ .operationId }}Cmd()
    {{ .name }}Cmd.AddCommand({{ .operationId }}Cmd)
}