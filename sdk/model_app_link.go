/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// AppLink struct for AppLink
type AppLink struct {
	App *HrefObjectAppLink `json:"app,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AppLink AppLink

// NewAppLink instantiates a new AppLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppLink() *AppLink {
	this := AppLink{}
	return &this
}

// NewAppLinkWithDefaults instantiates a new AppLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppLinkWithDefaults() *AppLink {
	this := AppLink{}
	return &this
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *AppLink) GetApp() HrefObjectAppLink {
	if o == nil || o.App == nil {
		var ret HrefObjectAppLink
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppLink) GetAppOk() (*HrefObjectAppLink, bool) {
	if o == nil || o.App == nil {
		return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *AppLink) HasApp() bool {
	if o != nil && o.App != nil {
		return true
	}

	return false
}

// SetApp gets a reference to the given HrefObjectAppLink and assigns it to the App field.
func (o *AppLink) SetApp(v HrefObjectAppLink) {
	o.App = &v
}

func (o AppLink) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.App != nil {
		toSerialize["app"] = o.App
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AppLink) UnmarshalJSON(bytes []byte) (err error) {
	varAppLink := _AppLink{}

	err = json.Unmarshal(bytes, &varAppLink)
	if err == nil {
		*o = AppLink(varAppLink)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "app")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableAppLink struct {
	value *AppLink
	isSet bool
}

func (v NullableAppLink) Get() *AppLink {
	return v.value
}

func (v *NullableAppLink) Set(val *AppLink) {
	v.value = val
	v.isSet = true
}

func (v NullableAppLink) IsSet() bool {
	return v.isSet
}

func (v *NullableAppLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppLink(val *AppLink) *NullableAppLink {
	return &NullableAppLink{value: val, isSet: true}
}

func (v NullableAppLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

