/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// PolicyMappingLinksAllOfPolicy struct for PolicyMappingLinksAllOfPolicy
type PolicyMappingLinksAllOfPolicy struct {
	Hints *HrefHints `json:"hints,omitempty"`
	// Link URI
	Href string `json:"href"`
	// Link name
	Name *string `json:"name,omitempty"`
	// The media type of the link. If omitted, it is implicitly `application/json`.
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PolicyMappingLinksAllOfPolicy PolicyMappingLinksAllOfPolicy

// NewPolicyMappingLinksAllOfPolicy instantiates a new PolicyMappingLinksAllOfPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyMappingLinksAllOfPolicy(href string) *PolicyMappingLinksAllOfPolicy {
	this := PolicyMappingLinksAllOfPolicy{}
	this.Href = href
	return &this
}

// NewPolicyMappingLinksAllOfPolicyWithDefaults instantiates a new PolicyMappingLinksAllOfPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyMappingLinksAllOfPolicyWithDefaults() *PolicyMappingLinksAllOfPolicy {
	this := PolicyMappingLinksAllOfPolicy{}
	return &this
}

// GetHints returns the Hints field value if set, zero value otherwise.
func (o *PolicyMappingLinksAllOfPolicy) GetHints() HrefHints {
	if o == nil || o.Hints == nil {
		var ret HrefHints
		return ret
	}
	return *o.Hints
}

// GetHintsOk returns a tuple with the Hints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyMappingLinksAllOfPolicy) GetHintsOk() (*HrefHints, bool) {
	if o == nil || o.Hints == nil {
		return nil, false
	}
	return o.Hints, true
}

// HasHints returns a boolean if a field has been set.
func (o *PolicyMappingLinksAllOfPolicy) HasHints() bool {
	if o != nil && o.Hints != nil {
		return true
	}

	return false
}

// SetHints gets a reference to the given HrefHints and assigns it to the Hints field.
func (o *PolicyMappingLinksAllOfPolicy) SetHints(v HrefHints) {
	o.Hints = &v
}

// GetHref returns the Href field value
func (o *PolicyMappingLinksAllOfPolicy) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *PolicyMappingLinksAllOfPolicy) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *PolicyMappingLinksAllOfPolicy) SetHref(v string) {
	o.Href = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PolicyMappingLinksAllOfPolicy) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyMappingLinksAllOfPolicy) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PolicyMappingLinksAllOfPolicy) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PolicyMappingLinksAllOfPolicy) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PolicyMappingLinksAllOfPolicy) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyMappingLinksAllOfPolicy) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PolicyMappingLinksAllOfPolicy) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PolicyMappingLinksAllOfPolicy) SetType(v string) {
	o.Type = &v
}

func (o PolicyMappingLinksAllOfPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hints != nil {
		toSerialize["hints"] = o.Hints
	}
	if true {
		toSerialize["href"] = o.Href
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PolicyMappingLinksAllOfPolicy) UnmarshalJSON(bytes []byte) (err error) {
	varPolicyMappingLinksAllOfPolicy := _PolicyMappingLinksAllOfPolicy{}

	err = json.Unmarshal(bytes, &varPolicyMappingLinksAllOfPolicy)
	if err == nil {
		*o = PolicyMappingLinksAllOfPolicy(varPolicyMappingLinksAllOfPolicy)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "hints")
		delete(additionalProperties, "href")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullablePolicyMappingLinksAllOfPolicy struct {
	value *PolicyMappingLinksAllOfPolicy
	isSet bool
}

func (v NullablePolicyMappingLinksAllOfPolicy) Get() *PolicyMappingLinksAllOfPolicy {
	return v.value
}

func (v *NullablePolicyMappingLinksAllOfPolicy) Set(val *PolicyMappingLinksAllOfPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyMappingLinksAllOfPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyMappingLinksAllOfPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyMappingLinksAllOfPolicy(val *PolicyMappingLinksAllOfPolicy) *NullablePolicyMappingLinksAllOfPolicy {
	return &NullablePolicyMappingLinksAllOfPolicy{value: val, isSet: true}
}

func (v NullablePolicyMappingLinksAllOfPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyMappingLinksAllOfPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

