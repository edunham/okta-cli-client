/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// MapAuthenticatorPolicyMappingRequest struct for MapAuthenticatorPolicyMappingRequest
type MapAuthenticatorPolicyMappingRequest struct {
	PolicyId             *string `json:"policyId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MapAuthenticatorPolicyMappingRequest MapAuthenticatorPolicyMappingRequest

// NewMapAuthenticatorPolicyMappingRequest instantiates a new MapAuthenticatorPolicyMappingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapAuthenticatorPolicyMappingRequest() *MapAuthenticatorPolicyMappingRequest {
	this := MapAuthenticatorPolicyMappingRequest{}
	return &this
}

// NewMapAuthenticatorPolicyMappingRequestWithDefaults instantiates a new MapAuthenticatorPolicyMappingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapAuthenticatorPolicyMappingRequestWithDefaults() *MapAuthenticatorPolicyMappingRequest {
	this := MapAuthenticatorPolicyMappingRequest{}
	return &this
}

// GetPolicyId returns the PolicyId field value if set, zero value otherwise.
func (o *MapAuthenticatorPolicyMappingRequest) GetPolicyId() string {
	if o == nil || o.PolicyId == nil {
		var ret string
		return ret
	}
	return *o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapAuthenticatorPolicyMappingRequest) GetPolicyIdOk() (*string, bool) {
	if o == nil || o.PolicyId == nil {
		return nil, false
	}
	return o.PolicyId, true
}

// HasPolicyId returns a boolean if a field has been set.
func (o *MapAuthenticatorPolicyMappingRequest) HasPolicyId() bool {
	if o != nil && o.PolicyId != nil {
		return true
	}

	return false
}

// SetPolicyId gets a reference to the given string and assigns it to the PolicyId field.
func (o *MapAuthenticatorPolicyMappingRequest) SetPolicyId(v string) {
	o.PolicyId = &v
}

func (o MapAuthenticatorPolicyMappingRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PolicyId != nil {
		toSerialize["policyId"] = o.PolicyId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MapAuthenticatorPolicyMappingRequest) UnmarshalJSON(bytes []byte) (err error) {
	varMapAuthenticatorPolicyMappingRequest := _MapAuthenticatorPolicyMappingRequest{}

	err = json.Unmarshal(bytes, &varMapAuthenticatorPolicyMappingRequest)
	if err == nil {
		*o = MapAuthenticatorPolicyMappingRequest(varMapAuthenticatorPolicyMappingRequest)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "policyId")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableMapAuthenticatorPolicyMappingRequest struct {
	value *MapAuthenticatorPolicyMappingRequest
	isSet bool
}

func (v NullableMapAuthenticatorPolicyMappingRequest) Get() *MapAuthenticatorPolicyMappingRequest {
	return v.value
}

func (v *NullableMapAuthenticatorPolicyMappingRequest) Set(val *MapAuthenticatorPolicyMappingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMapAuthenticatorPolicyMappingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMapAuthenticatorPolicyMappingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapAuthenticatorPolicyMappingRequest(val *MapAuthenticatorPolicyMappingRequest) *NullableMapAuthenticatorPolicyMappingRequest {
	return &NullableMapAuthenticatorPolicyMappingRequest{value: val, isSet: true}
}

func (v NullableMapAuthenticatorPolicyMappingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapAuthenticatorPolicyMappingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
