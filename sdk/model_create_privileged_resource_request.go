/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// model_oneof.mustache
// CreatePrivilegedResourceRequest - struct for CreatePrivilegedResourceRequest
type CreatePrivilegedResourceRequest struct {
	PrivilegedResourceAccountApp  *PrivilegedResourceAccountApp
	PrivilegedResourceAccountOkta *PrivilegedResourceAccountOkta
}

// PrivilegedResourceAccountAppAsCreatePrivilegedResourceRequest is a convenience function that returns PrivilegedResourceAccountApp wrapped in CreatePrivilegedResourceRequest
func PrivilegedResourceAccountAppAsCreatePrivilegedResourceRequest(v *PrivilegedResourceAccountApp) CreatePrivilegedResourceRequest {
	return CreatePrivilegedResourceRequest{
		PrivilegedResourceAccountApp: v,
	}
}

// PrivilegedResourceAccountOktaAsCreatePrivilegedResourceRequest is a convenience function that returns PrivilegedResourceAccountOkta wrapped in CreatePrivilegedResourceRequest
func PrivilegedResourceAccountOktaAsCreatePrivilegedResourceRequest(v *PrivilegedResourceAccountOkta) CreatePrivilegedResourceRequest {
	return CreatePrivilegedResourceRequest{
		PrivilegedResourceAccountOkta: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct  CUSTOM
func (dst *CreatePrivilegedResourceRequest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'APP_ACCOUNT'
	if jsonDict["resourceType"] == "APP_ACCOUNT" {
		// try to unmarshal JSON data into PrivilegedResourceAccountApp
		err = json.Unmarshal(data, &dst.PrivilegedResourceAccountApp)
		if err == nil {
			return nil // data stored in dst.PrivilegedResourceAccountApp, return on the first match
		} else {
			dst.PrivilegedResourceAccountApp = nil
			return fmt.Errorf("Failed to unmarshal CreatePrivilegedResourceRequest as PrivilegedResourceAccountApp: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OKTA_USER_ACCOUNT'
	if jsonDict["resourceType"] == "OKTA_USER_ACCOUNT" {
		// try to unmarshal JSON data into PrivilegedResourceAccountOkta
		err = json.Unmarshal(data, &dst.PrivilegedResourceAccountOkta)
		if err == nil {
			return nil // data stored in dst.PrivilegedResourceAccountOkta, return on the first match
		} else {
			dst.PrivilegedResourceAccountOkta = nil
			return fmt.Errorf("Failed to unmarshal CreatePrivilegedResourceRequest as PrivilegedResourceAccountOkta: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PrivilegedResourceAccountApp'
	if jsonDict["resourceType"] == "PrivilegedResourceAccountApp" {
		// try to unmarshal JSON data into PrivilegedResourceAccountApp
		err = json.Unmarshal(data, &dst.PrivilegedResourceAccountApp)
		if err == nil {
			return nil // data stored in dst.PrivilegedResourceAccountApp, return on the first match
		} else {
			dst.PrivilegedResourceAccountApp = nil
			return fmt.Errorf("Failed to unmarshal CreatePrivilegedResourceRequest as PrivilegedResourceAccountApp: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PrivilegedResourceAccountOkta'
	if jsonDict["resourceType"] == "PrivilegedResourceAccountOkta" {
		// try to unmarshal JSON data into PrivilegedResourceAccountOkta
		err = json.Unmarshal(data, &dst.PrivilegedResourceAccountOkta)
		if err == nil {
			return nil // data stored in dst.PrivilegedResourceAccountOkta, return on the first match
		} else {
			dst.PrivilegedResourceAccountOkta = nil
			return fmt.Errorf("Failed to unmarshal CreatePrivilegedResourceRequest as PrivilegedResourceAccountOkta: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreatePrivilegedResourceRequest) MarshalJSON() ([]byte, error) {
	if src.PrivilegedResourceAccountApp != nil {
		return json.Marshal(&src.PrivilegedResourceAccountApp)
	}

	if src.PrivilegedResourceAccountOkta != nil {
		return json.Marshal(&src.PrivilegedResourceAccountOkta)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreatePrivilegedResourceRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.PrivilegedResourceAccountApp != nil {
		return obj.PrivilegedResourceAccountApp
	}

	if obj.PrivilegedResourceAccountOkta != nil {
		return obj.PrivilegedResourceAccountOkta
	}

	// all schemas are nil
	return nil
}

type NullableCreatePrivilegedResourceRequest struct {
	value *CreatePrivilegedResourceRequest
	isSet bool
}

func (v NullableCreatePrivilegedResourceRequest) Get() *CreatePrivilegedResourceRequest {
	return v.value
}

func (v *NullableCreatePrivilegedResourceRequest) Set(val *CreatePrivilegedResourceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePrivilegedResourceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePrivilegedResourceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePrivilegedResourceRequest(val *CreatePrivilegedResourceRequest) *NullableCreatePrivilegedResourceRequest {
	return &NullableCreatePrivilegedResourceRequest{value: val, isSet: true}
}

func (v NullableCreatePrivilegedResourceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePrivilegedResourceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
